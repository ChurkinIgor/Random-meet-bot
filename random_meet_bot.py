import os
import random
import sqlite3
from fastapi import FastAPI, Request
from telegram import Update, Bot
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from fastapi.responses import FileResponse

TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = f"/webhook/{TOKEN}"
DB_PATH = "users.db"
app = FastAPI()

bot_app = ApplicationBuilder().token(TOKEN).build()
bot: Bot = bot_app.bot
scheduler = AsyncIOScheduler()

# --- DB SETUP ---
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    last_active TIMESTAMP
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS stats (
    user_id INTEGER PRIMARY KEY,
    meetings INTEGER DEFAULT 0,
    topics INTEGER DEFAULT 0,
    last_meeting TIMESTAMP
)
""")
conn.commit()

# --- THEMES ---
TOPICS_FILE = "topics.txt"
if not os.path.exists(TOPICS_FILE):
    with open(TOPICS_FILE, "w") as f:
        f.write("–ß—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–±—è –≤ —Ä–∞–±–æ—Ç–µ?\n")
        f.write("–ö–∞–∫–æ–π –Ω–∞–≤—ã–∫ —Ö–æ—á–µ—à—å —Ä–∞–∑–≤–∏—Ç—å?\n")

def load_topics():
    with open(TOPICS_FILE, "r") as f:
        return [line.strip() for line in f if line.strip()]

def save_topic(text):
    with open(TOPICS_FILE, "a") as f:
        f.write(text + "\n")

# --- COMMANDS ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    uname = update.effective_user.username or "anon"
    now = datetime.now()
    cursor.execute("""
        INSERT INTO users (user_id, username, last_active)
        VALUES (?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET username=excluded.username, last_active=excluded.last_active
    """, (uid, uname, now))
    cursor.execute("INSERT OR IGNORE INTO stats (user_id) VALUES (?)", (uid,))
    conn.commit()
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ *—Ä–∞–Ω–¥–æ–º–Ω—ã–º –ø—è—Ç–Ω–∏—á–Ω—ã–º –≤—Å—Ç—Ä–µ—á–∞–º*.

"
        "–ö–∞–∂–¥—ã–π —á–µ—Ç–≤–µ—Ä–≥ –≤ 12:00 (UTC) —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å:
"
        "‚Ä¢ —Ç–≤–æ–∏–º –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–º –∏–∑ –∫–æ–º–∞–Ω–¥—ã
"
        "‚Ä¢ —Ç–µ–º–æ–π –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
"
        "‚Ä¢ —Å—Å—ã–ª–∫–æ–π –Ω–∞ Google Meet –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏

"
        "–≠—Ç–æ –æ—Ç–ª–∏—á–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –±–ª–∏–∂–µ —Å –∫–æ–º–∞–Ω–¥–æ–π, –æ–±—Å—É–¥–∏—Ç—å –∏–¥–µ–∏ –∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è.

"
        "üìå –ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.",
        parse_mode="Markdown"
    )

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
    conn.commit()
    await update.message.reply_text("üö™ –¢—ã –ø–æ–∫–∏–Ω—É–ª –≤—Å—Ç—Ä–µ—á–Ω—ã–π –∫–ª—É–±. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å!")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ *Random Meet Bot* ‚Äî –±–æ—Ç –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–∞–Ω–¥—ã.

"
        "üóì *–ß—Ç–æ –¥–µ–ª–∞–µ—Ç:*
"
        "‚Ä¢ –ö–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É ‚Äî –Ω–æ–≤–∞—è –ø–∞—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
"
        "‚Ä¢ –¢–µ–º—ã –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω–æ
"
        "‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º —Ç–µ–º–∞–º

"
        "üìå *–ö–æ–º–∞–Ω–¥—ã:*
"
        "/start ‚Äî –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤—Å—Ç—Ä–µ—á–∞–º
"
        "/stop ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è
"
        "/suggest [—Ç–µ–º–∞] ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É
"
        "/topics ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–º
"
        "/top ‚Äî —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
"
        "/stats ‚Äî —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
"
        "/export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç CSV (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)

"
        "–ñ–µ–ª–∞–µ–º –∫–ª–∞—Å—Å–Ω—ã—Ö –∏ –ø–æ–ª–µ–∑–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á!",
        parse_mode="Markdown"
    )"
    )

async def suggest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = " ".join(context.args)
    if not text:
        return await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å–ª–µ /suggest ...")
    save_topic(text)
    cursor.execute("UPDATE stats SET topics = topics + 1 WHERE user_id = ?", (user_id,))
    conn.commit()
    await update.message.reply_text("‚úÖ –¢–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

async def topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topics = load_topics()
    msg = "\n".join(f"‚Ä¢ {t}" for t in topics[:20])
    await update.message.reply_text("üìö –¢–µ–º—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á:\n" + msg)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute("SELECT meetings, topics, last_meeting FROM stats WHERE user_id = ?", (user_id,))
    r = cursor.fetchone()
    if r:
        await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—Å—Ç—Ä–µ—á: {r[0]}\n–¢–µ–º: {r[1]}\n–ü–æ—Å–ª–µ–¥–Ω—è—è –≤—Å—Ç—Ä–µ—á–∞: {r[2] or '-'}")
    else:
        await update.message.reply_text("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("""
    SELECT u.username, s.meetings, s.topics FROM stats s
    JOIN users u ON u.user_id = s.user_id
    ORDER BY s.meetings DESC, s.topics DESC LIMIT 5
    """)
    rows = cursor.fetchall()
    lines = [f"{i+1}. @{r[0] or 'anon'} ‚Äî {r[1]} –≤—Å—Ç—Ä–µ—á, {r[2]} —Ç–µ–º" for i, r in enumerate(rows)]
    await update.message.reply_text("üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n" + "\n".join(lines))

async def export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = 217092555
    if update.effective_user.id != admin_id:
        return await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    df_path = "/tmp/export.csv"
    import pandas as pd
    df = pd.read_sql_query("SELECT * FROM users LEFT JOIN stats USING(user_id)", conn)
    df.to_csv(df_path, index=False)
    await bot.send_document(chat_id=admin_id, document=open(df_path, "rb"), filename="export.csv")

async def faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùì *FAQ ‚Äî —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*

"
        "‚Ä¢ *–ß—Ç–æ –∑–∞ –≤—Å—Ç—Ä–µ—á–∏?*
–ö–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É –±–æ—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –ø–∞—Ä—ã (–∏–ª–∏ —Ç—Ä–æ–π–∫–∏), —á—Ç–æ–±—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –ø–æ–æ–±—â–∞—Ç—å—Å—è –∏ –æ–±–º–µ–Ω—è—Ç—å—Å—è –æ–ø—ã—Ç–æ–º.

"
        "‚Ä¢ *–ì–¥–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤—Å—Ç—Ä–µ—á–∞?*
–ß–µ—Ä–µ–∑ Google Meet ‚Äî –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.

"
        "‚Ä¢ *–û —á—ë–º –≥–æ–≤–æ—Ä–∏—Ç—å?*
–ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ç–µ–º—É, –Ω–æ –º–æ–∂–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å –Ω–∞ –ª—é–±—É—é. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –∂–∏–≤–æ–π –¥–∏–∞–ª–æ–≥.

"
        "‚Ä¢ *–ß—Ç–æ –µ—Å–ª–∏ —è –∑–∞–Ω—è—Ç?*
–ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /stop, —á—Ç–æ–±—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å—Å—è.

"
        "‚Ä¢ *–ó–∞—á–µ–º —ç—Ç–æ –≤—Å—ë?*
–ß—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥–∞ –ª—É—á—à–µ —É–∑–Ω–∞–≤–∞–ª–∞ –¥—Ä—É–≥ –¥—Ä—É–≥–∞, –¥–µ–ª–∏–ª–∞—Å—å –æ–ø—ã—Ç–æ–º –∏ —Ä–∞–∑–≤–∏–≤–∞–ª–∞ –¥–æ–≤–µ—Ä–∏–µ.",
        parse_mode="Markdown"
    )

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    if context.args:
        text = " ".join(context.args)
        cursor.execute("UPDATE users SET profile = ? WHERE user_id = ?", (text, uid))
        conn.commit()
        await update.message.reply_text("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!")
    else:
        cursor.execute("SELECT profile FROM users WHERE user_id = ?", (uid,))
        row = cursor.fetchone()
        if row and row[0]:
            await update.message.reply_text(f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: {row[0]}

–ò–∑–º–µ–Ω–∏ –µ–≥–æ —Ç–∞–∫: /profile –Ø –¥–∏–∑–∞–π–Ω–µ—Ä, –ª—é–±–ª—é –≤–µ–ª–æ–ø–æ—Ö–æ–¥—ã")
        else:
            await update.message.reply_text("üë§ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –î–æ–±–∞–≤—å –µ–≥–æ —Ç–∞–∫:
/profile –Ø –¥–∏–∑–∞–π–Ω–µ—Ä, –ª—é–±–ª—é –≤–µ–ª–æ–ø–æ—Ö–æ–¥—ã")

# --- MATCHING ---
async def match_users():
    cursor.execute("SELECT user_id, username FROM users")
    users = cursor.fetchall()
    random.shuffle(users)
    pairs = [(users[i], users[i+1]) for i in range(0, len(users)-1, 2)]
    if len(users) % 2:
        pairs.append((users[-1], None))

    topic = random.choice(load_topics())
    now = datetime.now()

    for u1, u2 in pairs:
        try:
            if u2:
                # Google Meet link
                link = f"https://meet.google.com/lookup/{u1[1]}-{u2[1]}-{random.randint(1000,9999)}"
                cursor.execute("SELECT profile FROM users WHERE user_id = ?", (u2[0],))
                p2 = cursor.fetchone()
                ptext = f"
üë§ –û —Å–µ–±–µ: {p2[0]}" if p2 and p2[0] else ""
                await bot.send_message(chat_id=u1[0], text=f"üë• –¢–≤–æ—è –ø–∞—Ä–∞: @{u2[1]}
üí¨ –¢–µ–º–∞: {topic}
üìé –°—Å—ã–ª–∫–∞: {link}{ptext}")
                cursor.execute("SELECT profile FROM users WHERE user_id = ?", (u1[0],))
                p1 = cursor.fetchone()
                ptext2 = f"
üë§ –û —Å–µ–±–µ: {p1[0]}" if p1 and p1[0] else ""
                await bot.send_message(chat_id=u2[0], text=f"üë• –¢–≤–æ—è –ø–∞—Ä–∞: @{u1[1]}
üí¨ –¢–µ–º–∞: {topic}
üìé –°—Å—ã–ª–∫–∞: {link}{ptext2}")
                cursor.execute("UPDATE stats SET meetings = meetings + 1, last_meeting = ? WHERE user_id IN (?, ?)", (now, u1[0], u2[0]))
            else:
                await bot.send_message(chat_id=u1[0], text="üòî –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ —Ç—ã –±–µ–∑ –ø–∞—Ä—ã. –ñ–¥–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—è—Ç–Ω–∏—Ü—ã!")
        except:
            continue
    conn.commit()

# --- –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã ---
bot_app.add_handler(CommandHandler("start", start))
bot_app.add_handler(CommandHandler("stop", stop))
bot_app.add_handler(CommandHandler("help", help_command))
bot_app.add_handler(CommandHandler("suggest", suggest))
bot_app.add_handler(CommandHandler("topics", topics))
bot_app.add_handler(CommandHandler("stats", stats))
bot_app.add_handler(CommandHandler("top", top))
bot_app.add_handler(CommandHandler("export", export))
bot_app.add_handler(CommandHandler("faq", faq))
bot_app.add_handler(CommandHandler("profile", profile))
bot_app.add_handler(CommandHandler("faq", faq))

# --- FastAPI ---
@app.on_event("startup")
async def startup():
    await bot.set_webhook(WEBHOOK_URL + WEBHOOK_PATH)
    scheduler.add_job(match_users, "cron", day_of_week="thu", hour=12)
    scheduler.start()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@app.post(WEBHOOK_PATH)
async def telegram_webhook(req: Request):
    data = await req.json()
    update = Update.de_json(data, bot)
    await bot_app.process_update(update)
    return {"ok": True}
