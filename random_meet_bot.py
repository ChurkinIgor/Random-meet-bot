import os
import random
import sqlite3
from fastapi import FastAPI, Request
from telegram import Update, Bot
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from fastapi.responses import FileResponse

TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
WEBHOOK_PATH = f"/webhook/{TOKEN}"
DB_PATH = "users.db"
app = FastAPI()

bot_app = ApplicationBuilder().token(TOKEN).build()
bot: Bot = bot_app.bot
scheduler = AsyncIOScheduler()

# --- DB SETUP ---
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    last_active TIMESTAMP
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS stats (
    user_id INTEGER PRIMARY KEY,
    meetings INTEGER DEFAULT 0,
    topics INTEGER DEFAULT 0,
    last_meeting TIMESTAMP
)
""")
conn.commit()

# --- THEMES ---
TOPICS_FILE = "topics.txt"
if not os.path.exists(TOPICS_FILE):
    with open(TOPICS_FILE, "w") as f:
        f.write("–ß—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–±—è –≤ —Ä–∞–±–æ—Ç–µ?\n")
        f.write("–ö–∞–∫–æ–π –Ω–∞–≤—ã–∫ —Ö–æ—á–µ—à—å —Ä–∞–∑–≤–∏—Ç—å?\n")

def load_topics():
    with open(TOPICS_FILE, "r") as f:
        return [line.strip() for line in f if line.strip()]

def save_topic(text):
    with open(TOPICS_FILE, "a") as f:
        f.write(text + "\n")

# --- COMMANDS ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "anon"
    now = datetime.now()
    cursor.execute("""
        INSERT INTO users (user_id, username, last_active)
        VALUES (?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET
            username=excluded.username,
            last_active=excluded.last_active
    """, (user_id, username, now))
    cursor.execute("INSERT OR IGNORE INTO stats (user_id) VALUES (?)", (user_id,))
    conn.commit()
    await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—Å—Ç—Ä–µ—á–∏ ‚Äî –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º. –£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ: /help")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
    conn.commit()
    await update.message.reply_text("üö™ –¢—ã –ø–æ–∫–∏–Ω—É–ª –≤—Å—Ç—Ä–µ—á–Ω—ã–π –∫–ª—É–±. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å!")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìå –ö–æ–º–∞–Ω–¥—ã:\n/start ‚Äî –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è\n/stop ‚Äî –≤—ã–π—Ç–∏\n/suggest ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É\n/topics ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–µ–º\n/top ‚Äî —Ç–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n/stats ‚Äî —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/export ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ CSV (–∞–¥–º–∏–Ω)"
    )

async def suggest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = " ".join(context.args)
    if not text:
        return await update.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å–ª–µ /suggest ...")
    save_topic(text)
    cursor.execute("UPDATE stats SET topics = topics + 1 WHERE user_id = ?", (user_id,))
    conn.commit()
    await update.message.reply_text("‚úÖ –¢–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

async def topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topics = load_topics()
    msg = "\n".join(f"‚Ä¢ {t}" for t in topics[:20])
    await update.message.reply_text("üìö –¢–µ–º—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á:\n" + msg)

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute("SELECT meetings, topics, last_meeting FROM stats WHERE user_id = ?", (user_id,))
    r = cursor.fetchone()
    if r:
        await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—Å—Ç—Ä–µ—á: {r[0]}\n–¢–µ–º: {r[1]}\n–ü–æ—Å–ª–µ–¥–Ω—è—è –≤—Å—Ç—Ä–µ—á–∞: {r[2] or '-'}")
    else:
        await update.message.reply_text("–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("""
    SELECT u.username, s.meetings, s.topics FROM stats s
    JOIN users u ON u.user_id = s.user_id
    ORDER BY s.meetings DESC, s.topics DESC LIMIT 5
    """)
    rows = cursor.fetchall()
    lines = [f"{i+1}. @{r[0] or 'anon'} ‚Äî {r[1]} –≤—Å—Ç—Ä–µ—á, {r[2]} —Ç–µ–º" for i, r in enumerate(rows)]
    await update.message.reply_text("üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n" + "\n".join(lines))

async def export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = 217092555
    if update.effective_user.id != admin_id:
        return await update.message.reply_text("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    df_path = "/tmp/export.csv"
    import pandas as pd
    df = pd.read_sql_query("SELECT * FROM users LEFT JOIN stats USING(user_id)", conn)
    df.to_csv(df_path, index=False)
    await bot.send_document(chat_id=admin_id, document=open(df_path, "rb"), filename="export.csv")

# --- MATCHING ---
async def match_users():
    cursor.execute("SELECT user_id, username FROM users")
    users = cursor.fetchall()
    random.shuffle(users)
    pairs = [(users[i], users[i+1]) for i in range(0, len(users)-1, 2)]
    if len(users) % 2:
        pairs.append((users[-1], None))
    topic = random.choice(load_topics())
    now = datetime.now()
    for u1, u2 in pairs:
        try:
            if u2:
                msg = f"ü§ù –í–∞—à–∞ –ø–∞—Ä–∞ –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É: @{u2[1]}\nüí° –¢–µ–º–∞: {topic}"
                await bot.send_message(chat_id=u1[0], text=msg)
                await bot.send_message(chat_id=u2[0], text=f"ü§ù –í–∞—à–∞ –ø–∞—Ä–∞: @{u1[1]}\nüí° –¢–µ–º–∞: {topic}")
                cursor.execute("UPDATE stats SET meetings = meetings + 1, last_meeting = ? WHERE user_id IN (?, ?)", (now, u1[0], u2[0]))
            else:
                await bot.send_message(chat_id=u1[0], text="üòî –ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ—Ç –ø–∞—Ä—ã. –ñ–¥–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—è—Ç–Ω–∏—Ü—ã!")
        except:
            continue
    conn.commit()

# --- –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã ---
bot_app.add_handler(CommandHandler("start", start))
bot_app.add_handler(CommandHandler("stop", stop))
bot_app.add_handler(CommandHandler("help", help_command))
bot_app.add_handler(CommandHandler("suggest", suggest))
bot_app.add_handler(CommandHandler("topics", topics))
bot_app.add_handler(CommandHandler("stats", stats))
bot_app.add_handler(CommandHandler("top", top))
bot_app.add_handler(CommandHandler("export", export))

# --- FastAPI ---
@app.on_event("startup")
async def startup():
    await bot.set_webhook(WEBHOOK_URL + WEBHOOK_PATH)
    scheduler.add_job(match_users, "cron", day_of_week="thu", hour=12)
    scheduler.start()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

@app.post(WEBHOOK_PATH)
async def telegram_webhook(req: Request):
    data = await req.json()
    update = Update.de_json(data, bot)
    await bot_app.process_update(update)
    return {"ok": True}
