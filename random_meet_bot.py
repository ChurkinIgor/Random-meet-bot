import logging
import random
import sqlite3
import os
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime, timedelta

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–µ–º—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á
TOPICS_FILE = "topics.txt"
SUGGEST_LOG = "suggest_log.txt"

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∑–∞–ø–∏—Å—å —Ç–µ–º
def load_topics():
    if not os.path.exists(TOPICS_FILE):
        with open(TOPICS_FILE, "w") as f:
            f.write("–ß—Ç–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–±—è –≤ —Ä–∞–±–æ—Ç–µ?\n")
            f.write("–ö–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç —Ç—ã –±—ã —Ö–æ—Ç–µ–ª —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å, –Ω–æ –ø–æ–∫–∞ –Ω–µ –Ω–∞—á–∞–ª?\n")
    with open(TOPICS_FILE, "r") as f:
        return [line.strip() for line in f if line.strip()]

def add_topic(new_topic: str):
    with open(TOPICS_FILE, "a") as f:
        f.write(f"{new_topic}\n")

MEETING_TOPICS = load_topics()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def can_suggest(user_id):
    now = datetime.now()
    if not os.path.exists(SUGGEST_LOG):
        return True
    with open(SUGGEST_LOG, "r") as f:
        for line in f:
            uid, ts = line.strip().split("::")
            if int(uid) == user_id:
                last = datetime.fromisoformat(ts)
                return (now - last).days >= 7
    return True

def log_suggestion(user_id):
    now = datetime.now().isoformat()
    with open(SUGGEST_LOG, "a") as f:
        f.write(f"{user_id}::{now}\n")
    cursor.execute("INSERT INTO stats (user_id, topics) VALUES (?, 1) ON CONFLICT(user_id) DO UPDATE SET topics = topics + 1", (user_id,))
    conn.commit()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect("users.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    last_active TIMESTAMP
)
""")
cursor.execute("""
CREATE TABLE IF NOT EXISTS stats (
    user_id INTEGER PRIMARY KEY,
    meetings INTEGER DEFAULT 0,
    topics INTEGER DEFAULT 0,
    last_meeting TIMESTAMP
)
""")
conn.commit()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 217092555

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username or "anonymous"
    now = datetime.now()

    cursor.execute("""
    INSERT INTO users (user_id, username, last_active)
    VALUES (?, ?, ?)
    ON CONFLICT(user_id) DO UPDATE SET
        username=excluded.username,
        last_active=excluded.last_active
    """, (user_id, username, now))
    cursor.execute("INSERT OR IGNORE INTO stats (user_id) VALUES (?)", (user_id,))
    conn.commit()

    return update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ Telegram-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã.\n"
        "–ö–∞–∂–¥—ã–π —á–µ—Ç–≤–µ—Ä–≥ —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –ø—è—Ç–Ω–∏—á–Ω—É—é –≤—Å—Ç—Ä–µ—á—É –¥–ª—è –æ–±—â–µ–Ω–∏—è.\n\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ ‚Äî –Ω–∞–ø–∏—à–∏ /help."
    )

# –û—Ç–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
    conn.commit()
    return update.message.reply_text("–¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å!")

# –°–ø—Ä–∞–≤–∫–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "ü§ñ *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç Random Meet:*\n\n"
        "‚Ä¢ –ö–∞–∂–¥—ã–π —á–µ—Ç–≤–µ—Ä–≥ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–º –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤—Å—Ç—Ä–µ—á—É.\n"
        "‚Ä¢ –í—Å—Ç—Ä–µ—á–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ 12:00 –ø—è—Ç–Ω–∏—Ü—É  ‚Äî –º–æ–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å —Ä–∞–±–æ—Ç—É, –∏–¥–µ–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–æ–±—â–∞—Ç—å—Å—è.\n"
        "‚Ä¢ –ö–æ–º–∞–Ω–¥—ã:\n"
        "   /start ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
        "   /stop ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
        "   /help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "   /suggest [—Ç–µ–º–∞] ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É (—Ä–∞–∑ –≤ 7 –¥–Ω–µ–π)\n"
        "   /topics ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–º—ã\n"
        "   /stats ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        "\n*–ë–æ–Ω—É—Å:* –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω 30+ –¥–Ω–µ–π, –±–æ—Ç –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç."
    )
    return update.message.reply_text(help_text, parse_mode="Markdown")

# –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
def suggest_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not context.args:
        return update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Ç–µ–º—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä: /suggest –ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ —Ç–µ–±–µ —Ö–æ—á–µ—Ç—Å—è –ø–æ—Å–µ—Ç–∏—Ç—å?")

    if not can_suggest(user_id):
        return update.message.reply_text("‚ö†Ô∏è –¢—ã —É–∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª —Ç–µ–º—É –Ω–µ–¥–∞–≤–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π.")

    topic = " ".join(context.args).strip()
    add_topic(topic)
    MEETING_TOPICS.append(topic)
    log_suggestion(user_id)
    return update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –¢–≤–æ—è —Ç–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ø–∏—Å–æ–∫.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ç–µ–º
def list_topics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not MEETING_TOPICS:
        return update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º.")
    return update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ —Ç–µ–º:\n\n" + "\n".join(f"‚Ä¢ {t}" for t in MEETING_TOPICS))

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute("SELECT meetings, topics, last_meeting FROM stats WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if not row:
        return update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤–æ –≤—Å—Ç—Ä–µ—á–∞—Ö –∏ –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–ª —Ç–µ–º.")
    meetings, topics, last = row
    last_str = last if last else "‚Äî"
    return update.message.reply_text(
        f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"‚Ä¢ –í—Å—Ç—Ä–µ—á: {meetings}\n"
        f"‚Ä¢ –¢–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ: {topics}\n"
        f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –≤—Å—Ç—Ä–µ—á–∞: {last_str}"
    )

# –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
def top_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("""
        SELECT u.username, s.meetings, s.topics
        FROM stats s
        JOIN users u ON u.user_id = s.user_id
        ORDER BY s.meetings DESC, s.topics DESC
        LIMIT 5
    """)
    rows = cursor.fetchall()
    if not rows:
        return update.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    
    text = "üèÜ –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n\n"
    for i, (username, meet, top) in enumerate(rows, start=1):
        name = f"@{username}" if username else f"ID {i}"
        text += f"{i}. {name} ‚Äî {meet} –≤—Å—Ç—Ä–µ—á, {top} —Ç–µ–º\n"
    return update.message.reply_text(text)
# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        return update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

    cursor.execute("SELECT user_id, username, last_active FROM users")
    rows = cursor.fetchall()

    if not rows:
        return update.message.reply_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")

    message = "\n".join([f"ID: {uid}, Username: @{uname}, Last Active: {active}" for uid, uname, active in rows])
    return update.message.reply_text(f"üë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{message}")

# –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (30+ –¥–Ω–µ–π)
def cleanup_inactive():
    threshold = datetime.now() - timedelta(days=30)
    cursor.execute("DELETE FROM users WHERE last_active < ?", (threshold,))
    conn.commit()
    logger.info("–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ Google Meet
def generate_google_meet_link(username1, username2):
    base1 = username1 or "anon"
    base2 = username2 or "anon"
    suffix = f"{base1}-{base2}-{random.randint(1000, 9999)}"
    return f"https://meet.google.com/lookup/{suffix}"

# –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π —Ç–µ–º—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏
def get_random_topic():
    return random.choice(MEETING_TOPICS)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_meeting_pairs(application):
    threshold = datetime.now() - timedelta(days=14)
    cursor.execute("SELECT user_id, username FROM users WHERE last_active >= ?", (threshold,))
    user_data = cursor.fetchall()
    random.shuffle(user_data)

    if len(user_data) < 2:
        logger.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏.")
        return

    pairs = [(user_data[i], user_data[i + 1]) for i in range(0, len(user_data) - 1, 2)]

    if len(user_data) % 2 == 1:
        pairs.append((user_data[-1], None))

    for u1, u2 in pairs:
        u1_id, u1_name = u1
        if u2:
            u2_id, u2_name = u2
            link = generate_google_meet_link(u1_name, u2_name)
            topic = get_random_topic()
            now = datetime.now()
            try:
                await application.bot.send_message(chat_id=u1_id, text=f"ü§ù –¢–≤–æ—è –≤—Å—Ç—Ä–µ—á–∞ –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É: @{u2_name}\n–°—Å—ã–ª–∫–∞: {link}\n\nüí° –¢–µ–º–∞ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: *{topic}*", parse_mode="Markdown")
                await application.bot.send_message(chat_id=u2_id, text=f"ü§ù –¢–≤–æ—è –≤—Å—Ç—Ä–µ—á–∞ –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É: @{u1_name}\n–°—Å—ã–ª–∫–∞: {link}\n\nüí° –¢–µ–º–∞ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: *{topic}*", parse_mode="Markdown")
                cursor.execute("UPDATE stats SET meetings = meetings + 1, last_meeting = ? WHERE user_id IN (?, ?)", (now, u1_id, u2_id))
                conn.commit()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        else:
            try:
                await application.bot.send_message(chat_id=u1_id, text="üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –Ω–µ –Ω–∞—à–ª–æ—Å—å –ø–∞—Ä—ã. –ñ–¥–∏ —Å–ª–µ–¥—É—é—â—É—é –ø—è—Ç–Ω–∏—Ü—É!")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–¥–∏–Ω–æ—á–Ω–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = BackgroundScheduler()
scheduler.add_job(lambda: cleanup_inactive(), 'cron', hour=3)  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 03:00 –ø–æ UTC

async def scheduled_job():
    await send_meeting_pairs(app)

scheduler.add_job(scheduled_job, 'cron', day_of_week='thu', hour=12, minute=0)
scheduler.start()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(os.getenv("BOT_TOKEN")).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("stop", stop))
app.add_handler(CommandHandler("list", list_users))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("suggest", suggest_topic))
app.add_handler(CommandHandler("topics", list_topics))
app.add_handler(CommandHandler("stats", stats_command))
app.add_handler(CommandHandler("top", top_command))

logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
app.run_polling()
